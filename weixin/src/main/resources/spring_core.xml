<?xml version="1.0" encoding="UTF-8"?>  

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="        
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd  
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.3.xsd
        ">     
        <!-- Spring IOC 扫描指定的包 -->
        <context:component-scan base-package="com.star">  
        	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>  
 		<!-- Spring AOP  启动  自动激活动态代理 -->   
 		<aop:aspectj-autoproxy ></aop:aspectj-autoproxy>
 		<!-- 定时任务开关 -->
 		<task:annotation-driven/>
 		
 		<!-- 记载外部配置文件  properties -->
 		<context:property-placeholder location="classpath:jdbc.properties"/>
 		<!-- Druid 数据源相关信息配置 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
			init-method="init" destroy-method="close">
			<property name="driverClassName" value="${jdbc_driver}" />
			<property name="url" value="${jdbc_url}" />
			<property name="username" value="${jdbc_user}" />
			<property name="password" value="${jdbc_password}" />
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="1" />
			<property name="minIdle" value="1" />
			<property name="maxActive" value="10" />
	
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="10000" />
	
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
	
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
	
			<property name="testWhileIdle" value="true" />
	
			<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
			<property name="testOnBorrow" value="true" />
			<property name="testOnReturn" value="false" />
	
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize"
				value="20" />
			<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
			<property name="defaultAutoCommit" value="true" />
			<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
			<property name="validationQuery" value="select 1 " />
			
			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat" />
		</bean>  
		<!-- Spring jdbcTemplate 配置-->   
		<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		<!-- mybatis 和spring整合  spring和mybatis完美整合不需要mybatis的配置文件 -->
	  	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  		<property name="dataSource" ref="dataSource"> </property>
	  		<!-- mapper  映射文件配置 -->
	  		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	  		<!-- 别名设置   将该包内所有的类定义了别名，别名就是其类名-->
    		<property name="typeAliasesPackage" value="com.star.project.meeting.bean"></property>
	    	<!--配置分页插件-->
	    	<property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageInterceptor">
		        <property name="properties">
		          <!--使用下面的方式配置参数，一行配置一个 -->
		          <value>
		            helperDialect=mysql
		          </value>
		        </property>
		      </bean>
		    </array>
		  </property>
	  	</bean>
	  	<!-- 配置对应的sqlsession -->
	  	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	  	</bean>
	  	<!-- MapperScannerConfigurer 自动扫描 将Mapper接口生成代理注入到
	  	Spring DAO接口所在包名，Spring会自动查找其下的类 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.star.project.meeting.mapper"></property>
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		</bean>	
		<!-- 对dataSource 数据源进行事务管理 -->  
		<bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"  >
		    	<property name="dataSource" ref="dataSource"></property>
		</bean>
	    <!-- 启用声明式注解事务  -->
	    <!-- 注意：proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
		如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
		如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理 --> 
		<tx:annotation-driven transaction-manager="transactionManager" 	proxy-target-class="true" />
 </beans>